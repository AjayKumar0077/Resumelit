// This file handles AI integration with Google's Gemini AI

import { GoogleGenerativeAI } from "@google/generative-ai"

// Initialize the Gemini AI client
// In production, this would use an environment variable
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "YOUR_API_KEY")

export async function generateTextWithGemini(prompt: string, systemPrompt?: string): Promise<string> {
  try {
    // Check if we have a valid API key
    if (!process.env.GEMINI_API_KEY || process.env.GEMINI_API_KEY === "YOUR_API_KEY") {
      // For preview/demo purposes, return mock data instead of making an API call
      console.log("No valid Gemini API key found. Using mock response.")
      return generateMockResponse(prompt, systemPrompt)
    }

    // For text-only input, use the gemini-pro model
    const model = genAI.getGenerativeModel({ model: "gemini-pro" })

    // Configure the generation
    const generationConfig = {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1024,
    }

    // Create the prompt parts
    const promptParts = []

    if (systemPrompt) {
      promptParts.push({
        text: `${systemPrompt}\n\n`,
      })
    }

    promptParts.push({
      text: prompt,
    })

    // Generate content
    const result = await model.generateContent({
      contents: [{ role: "user", parts: promptParts }],
      generationConfig,
    })

    const response = result.response
    return response.text()
  } catch (error) {
    console.error("Error generating text with Gemini:", error)
    // Return mock data for preview/demo purposes
    return generateMockResponse(prompt, systemPrompt)
  }
}

// Helper function to generate mock responses based on the prompt
function generateMockResponse(prompt: string, systemPrompt?: string): string {
  // Check if this is a resume analysis request
  if (prompt.includes("Analyze the following resume") && systemPrompt?.includes("ATS system")) {
    return JSON.stringify(
      {
        overallScore: 78,
        categoryScores: {
          content: 85,
          format: 70,
          impact: 75,
          relevance: 80,
          keywords: 80,
        },
        strengths: [
          "Strong technical skills section with relevant technologies",
          "Quantifiable achievements in work experience",
          "Clear progression of career growth",
          "Well-structured education section",
        ],
        weaknesses: [
          "Summary could be more targeted to specific roles",
          "Some bullet points lack specific metrics or outcomes",
          "Could use more industry-specific keywords",
          "Experience descriptions could highlight more soft skills",
        ],
        keywords: [
          "JavaScript",
          "React",
          "Node.js",
          "Software Engineer",
          "Full Stack",
          "API",
          "Optimization",
          "Development",
          "Agile",
        ],
      },
      null,
      2,
    )
  }

  // Check if this is a cover letter generation request
  if (prompt.includes("Generate a") && prompt.includes("cover letter")) {
    return `
Dear Hiring Manager,

I am writing to express my interest in the Software Developer position at Acme Corporation. With my strong background in full-stack development and passion for creating efficient, user-friendly applications, I believe I would be a valuable addition to your team.

Throughout my career, I have developed expertise in JavaScript, React, and Node.js, which aligns perfectly with the requirements outlined in your job description. In my current role at Tech Solutions Inc., I successfully led the development of a customer portal that improved user engagement by 45% and reduced support tickets by 30%.

I am particularly drawn to Acme Corporation's commitment to innovation and your recent work on AI-powered solutions. I am excited about the possibility of contributing to such cutting-edge projects and helping to drive your company's continued success.

Thank you for considering my application. I look forward to the opportunity to discuss how my skills and experience can benefit your team.

Sincerely,
[Applicant Name]
    `
  }

  // Check if this is a skills suggestion request
  if (prompt.includes("Suggest") && prompt.includes("skills")) {
    return JSON.stringify([
      "React.js",
      "Node.js",
      "TypeScript",
      "GraphQL",
      "AWS",
      "Docker",
      "Kubernetes",
      "CI/CD",
      "Agile Methodologies",
      "System Design",
    ])
  }

  // Default mock response
  return "This is a mock response for preview purposes. In production, this would be generated by the Gemini AI model."
}

export async function analyzeResumeWithGemini(resumeText: string, jobTitle?: string): Promise<any> {
  try {
    const prompt = `
      Analyze the following resume ${jobTitle ? `for a ${jobTitle} position` : ""} and provide a detailed strength assessment.
      
      RESUME:
      ${resumeText}
      
      Provide your analysis in the following JSON format:
      {
        "overallScore": [a number between 0-100],
        "categoryScores": {
          "content": [0-100],
          "format": [0-100],
          "impact": [0-100],
          "relevance": [0-100],
          "keywords": [0-100]
        },
        "strengths": [array of 3-5 strengths],
        "weaknesses": [array of 3-5 areas for improvement],
        "keywords": [array of 5-10 important keywords found in the resume]
      }
      
      Return ONLY the JSON with no additional text.
    `

    const systemPrompt =
      "You are an expert ATS system and resume analyzer that helps job seekers understand the strengths and weaknesses of their resumes."

    const resultText = await generateTextWithGemini(prompt, systemPrompt)

    try {
      return JSON.parse(resultText)
    } catch (e) {
      console.error("Failed to parse AI response:", e)
      // Return mock data if parsing fails
      return getMockAnalysisData(resumeText, jobTitle)
    }
  } catch (error) {
    console.error("Error analyzing resume:", error)
    // Return mock data if the API call fails
    return getMockAnalysisData(resumeText, jobTitle)
  }
}

// Helper function to generate mock analysis data
function getMockAnalysisData(resumeText: string, jobTitle?: string): any {
  // Extract some basic info from the resume text to personalize the mock data
  const hasJavaScript = resumeText.toLowerCase().includes("javascript")
  const hasReact = resumeText.toLowerCase().includes("react")
  const hasNode = resumeText.toLowerCase().includes("node")
  const hasPython = resumeText.toLowerCase().includes("python")
  const hasAWS = resumeText.toLowerCase().includes("aws")

  // Adjust mock keywords based on resume content
  const keywords = []
  if (hasJavaScript) keywords.push("JavaScript")
  if (hasReact) keywords.push("React")
  if (hasNode) keywords.push("Node.js")
  if (hasPython) keywords.push("Python")
  if (hasAWS) keywords.push("AWS")

  // Add some default keywords if we don't have enough
  while (keywords.length < 9) {
    const defaultKeywords = [
      "Full Stack",
      "API",
      "Optimization",
      "Development",
      "Agile",
      "Git",
      "REST",
      "Database",
      "UI/UX",
    ]
    for (const keyword of defaultKeywords) {
      if (!keywords.includes(keyword)) {
        keywords.push(keyword)
        if (keywords.length >= 9) break
      }
    }
  }

  return {
    overallScore: 78,
    categoryScores: {
      content: 85,
      format: 70,
      impact: 75,
      relevance: 80,
      keywords: 80,
    },
    strengths: [
      "Strong technical skills section with relevant technologies",
      "Quantifiable achievements in work experience",
      "Clear progression of career growth",
      "Well-structured education section",
    ],
    weaknesses: [
      "Summary could be more targeted to specific roles",
      "Some bullet points lack specific metrics or outcomes",
      "Could use more industry-specific keywords",
      "Experience descriptions could highlight more soft skills",
    ],
    keywords: keywords,
  }
}

export async function generateCoverLetterWithGemini(
  resumeText: string,
  jobTitle: string,
  companyName: string,
  jobDescription?: string,
  recipientName?: string,
  additionalInfo?: string,
  tone = "professional",
): Promise<string> {
  try {
    const prompt = `
      Generate a ${tone} cover letter for a ${jobTitle} position at ${companyName}.
      
      RESUME INFORMATION:
      ${resumeText}
      
      JOB DESCRIPTION:
      ${jobDescription || "Not provided"}
      
      RECIPIENT:
      ${recipientName || "Hiring Manager"}
      
      ADDITIONAL INFORMATION TO INCLUDE:
      ${additionalInfo || "No additional information provided"}
      
      Please format the cover letter professionally with appropriate spacing and paragraphs.
      Include today's date (${new Date().toLocaleDateString()}) at the top.
      Include the applicant's contact information at the top.
      Address it to ${recipientName || "Hiring Manager"}.
      The tone should be ${tone}.
      Make it concise, compelling, and tailored to both the resume and job description.
      Highlight relevant skills and experiences from the resume that match the job.
      End with a call to action and thank you.
    `

    const systemPrompt =
      "You are an expert cover letter writer who creates personalized, compelling cover letters that showcase a candidate's relevant skills and experiences for specific job positions."

    return await generateTextWithGemini(prompt, systemPrompt)
  } catch (error) {
    console.error("Error generating cover letter:", error)
    // Return a mock cover letter if the API call fails
    return `
Dear ${recipientName || "Hiring Manager"},

I am writing to express my interest in the ${jobTitle} position at ${companyName}. With my strong background in this field and passion for delivering results, I believe I would be a valuable addition to your team.

Throughout my career, I have developed expertise in key areas that align perfectly with the requirements outlined in your job description. In my current role, I successfully led projects that improved efficiency and delivered measurable results.

I am particularly drawn to ${companyName}'s commitment to innovation and your recent work in the industry. I am excited about the possibility of contributing to such important projects and helping to drive your company's continued success.

Thank you for considering my application. I look forward to the opportunity to discuss how my skills and experience can benefit your team.

Sincerely,
[Applicant Name]
    `
  }
}

export async function translateWithGemini(text: string, targetLanguage: string): Promise<string> {
  try {
    const prompt = `
      Translate the following text to ${targetLanguage}:
      
      ${text}
      
      Provide ONLY the translated text with no additional explanations or notes.
    `

    const systemPrompt =
      "You are a professional translator with expertise in multiple languages. Provide accurate and natural-sounding translations."

    return await generateTextWithGemini(prompt, systemPrompt)
  } catch (error) {
    console.error("Error translating text:", error)
    // Return the original text if translation fails
    return `[Translation to ${targetLanguage} would appear here in production. Using original text for preview.]
    
${text}`
  }
}

export async function suggestSkillsWithGemini(jobTitle: string, currentSkills: string): Promise<string[]> {
  try {
    const prompt = `
      Suggest 10 relevant skills for a ${jobTitle} position.
      
      Current skills: ${currentSkills}
      
      Return ONLY a JSON array of strings with the skill names, with no additional text or explanation.
      Do not include skills that are already in the current skills list.
    `

    const systemPrompt =
      "You are an expert career advisor with deep knowledge of industry-specific skills and job requirements."

    const resultText = await generateTextWithGemini(prompt, systemPrompt)

    try {
      return JSON.parse(resultText)
    } catch (e) {
      console.error("Failed to parse AI response for skills:", e)
      // Return a fallback list if parsing fails
      return getDefaultSkills(jobTitle, currentSkills)
    }
  } catch (error) {
    console.error("Error suggesting skills:", error)
    // Return default skills if the API call fails
    return getDefaultSkills(jobTitle, currentSkills)
  }
}

// Helper function to generate default skills based on job title
function getDefaultSkills(jobTitle: string, currentSkills: string): string[] {
  const jobTitleLower = jobTitle.toLowerCase()
  const currentSkillsLower = currentSkills.toLowerCase()

  // Define skill sets for common job titles
  const skillSets: Record<string, string[]> = {
    developer: [
      "JavaScript",
      "TypeScript",
      "React",
      "Node.js",
      "GraphQL",
      "REST APIs",
      "Git",
      "CI/CD",
      "Docker",
      "AWS",
      "Testing",
      "Agile",
    ],
    engineer: [
      "System Design",
      "Algorithms",
      "Data Structures",
      "Scalability",
      "Performance Optimization",
      "Microservices",
      "Cloud Architecture",
      "Security",
      "DevOps",
      "Continuous Integration",
    ],
    designer: [
      "UI/UX",
      "Figma",
      "Adobe XD",
      "Sketch",
      "Wireframing",
      "Prototyping",
      "User Research",
      "Accessibility",
      "Design Systems",
      "Visual Design",
    ],
    manager: [
      "Team Leadership",
      "Project Management",
      "Agile/Scrum",
      "Stakeholder Management",
      "Strategic Planning",
      "Budgeting",
      "Performance Reviews",
      "Hiring",
      "Conflict Resolution",
      "Risk Management",
    ],
    analyst: [
      "Data Analysis",
      "SQL",
      "Excel",
      "Tableau",
      "Power BI",
      "Statistical Analysis",
      "Reporting",
      "Problem Solving",
      "Critical Thinking",
      "Business Intelligence",
    ],
    marketing: [
      "SEO",
      "Content Strategy",
      "Social Media",
      "Email Marketing",
      "Analytics",
      "Campaign Management",
      "A/B Testing",
      "CRM",
      "Market Research",
      "Brand Development",
    ],
  }

  // Determine which skill set to use based on job title
  let relevantSkills: string[] = []

  for (const [key, skills] of Object.entries(skillSets)) {
    if (jobTitleLower.includes(key)) {
      relevantSkills = skills
      break
    }
  }

  // If no matching job title, use a default set
  if (relevantSkills.length === 0) {
    relevantSkills = [
      "Communication",
      "Problem Solving",
      "Teamwork",
      "Adaptability",
      "Time Management",
      "Critical Thinking",
      "Attention to Detail",
      "Organization",
      "Leadership",
      "Technical Proficiency",
    ]
  }

  // Filter out skills that are already in the current skills list
  return relevantSkills.filter((skill) => !currentSkillsLower.includes(skill.toLowerCase())).slice(0, 10)
}
